{"version":3,"sources":["comonentes/AddCategory.js","comonentes/GifGridItem.js","helpers/getGifs.js","comonentes/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cate","console","log","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,KAElBO,QAAQC,IAAI,iBAKV,2BACEC,KAAK,OACLC,MAAQX,EACRY,SAnBiB,SAACT,GAEtBF,EAAcE,EAAEU,OAAOF,YCRlBG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAGrC,OACI,yBAAKC,UAAU,8CACZ,yBAAKC,IAAKF,EAAKG,IAAKJ,IACnB,2BAAIA,K,uBCPFK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEdN,EAFc,iDAEmCO,UAAUF,GAF7C,+DAGDG,MAAMR,GAHL,cAGdS,EAHc,gBAICA,EAAKC,OAJN,uBAIbC,EAJa,EAIbA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAVtB,kBAcbY,GAda,4CAAH,sDCGRK,EAAU,SAAC,GAAiB,IAAfZ,EAAc,EAAdA,SAAc,ECAZ,SAAEA,GAAe,IAAD,EAEdvB,mBAAS,CAC/B6B,KAAK,GACLO,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAkBxC,OAXAC,qBAAW,WACPjB,EAASC,GAAWiB,MAAM,SAAAC,GACtBH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAGnB,CAAEb,IAIGc,EDhByBK,CAAcnB,GAAjCU,EAFuB,EAE5BJ,KAAaO,EAFe,EAEfA,QAErB,OACI,oCACA,wBAAIjB,UAAU,qBAAqBI,GACjCa,GAAW,uBAAGjB,UAAU,oCAAb,WACb,yBAAKA,UAAU,aAGPc,EAAOF,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACAW,IAAMX,EAAIhB,IACLgB,UEeVY,EA7BM,WAAM,IAAD,EAGc5C,mBAAS,CAAC,YAHxB,mBAGf6C,EAHe,KAGH9C,EAHG,KAOtB,OACA,oCACA,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEI8C,EAAWd,KAAK,SAACR,GAAD,OACf,kBAAC,EAAD,CACAoB,IAAKpB,EACLA,SAAWA,UChBpBuB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.75e45fc5.chunk.js","sourcesContent":["import React, {useState}from 'react'\nimport { PropTypes } from 'prop-types';\n\n\nexport const AddCategory = ( {setCategories} ) => {\n\n    const [inputValue, setInputValue] = useState(''); // \n\n    const handleInputChage = (e) => {\n        // console.log(e.target.value);\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) =>{\n        e.preventDefault();\n        if( inputValue.trim().length > 2) {\n            setCategories( cate =>[ inputValue,...cate]);\n            setInputValue('');\n        }\n        console.log('Submit echo')\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>       \n          <input \n            type=\"text\"\n            value= {inputValue}\n            onChange= { handleInputChage }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n  \n   // console.log(id,title,url);\n    return (\n        <div className=\"card animate__animated animate__fadeInDown\">\n           <img src={url} alt={title} /> \n            <p>{title}</p>\n        </div>\n    )\n}\n","\n export const getGifs = async ( category ) => {\n        \n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=kARMYNFBzN9tkWW0lLuOETObXE66UURS`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    \n    const gifs = data.map( img =>{\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        } \n    });\n    //console.log( data);\n    return gifs;\n}","import React from 'react'\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ( {category}) => {\n\n    const { data:images, loading} = useFetchGifs( category );\n\n    return (\n        <>\n        <h3 className='animate__animated'>{category}</h3>\n        { loading && <p className='animate__animated animate__flash'>Loading</p>}\n        <div className=\"card-grid\">\n            \n                {\n                images.map( img =>(\n                    <GifGridItem \n                    key= {img.id}\n                    { ...img}\n                    />\n                ))\n                }\n            \n        </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data:[],\n        loading: true\n    });\n\n    useEffect( ()=>{\n        getGifs( category ).then( imgs =>{\n            setState({\n                data: imgs,\n                loading: false\n            })\n        } );\n    },[ category]);\n\n   \n\n    return state;  // { data:[], loading: true}\n}","import React,{useState} from 'react';\nimport { AddCategory } from './comonentes/AddCategory';\nimport { GifGrid } from './comonentes/GifGrid';\n\nconst GifExpertApp = () =>{\n   \n   \n    const [categories, setCategories] = useState(['Samuray']);\n\n   \n\n    return (\n    <>\n    <h2>GifExpertApp</h2>\n    <AddCategory setCategories={ setCategories } />\n    <hr />\n   \n    <ol>\n    {\n        categories.map( (category) =>(\n         <GifGrid \n         key={category} \n         category={ category }\n         />\n        ))\n    }\n    </ol>\n    </>\n   )\n};\n\n\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}